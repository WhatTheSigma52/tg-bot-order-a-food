import os
import telebot
from dotenv import load_dotenv
from telebot import types
import json
from menu import menu_items, ITEMS_PER_PAGE
import re


load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)


def open_json_file():
    '''return data from JSON-file.'''
    with open('data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    return data


def close_json_file(data):
    '''Dump data in JSON_file.'''
    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def correct_number(phone_number):
    '''Check user's phone num is it correct or not.'''
    pattern = re.compile(r'^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$')
    if pattern.match(phone_number):
        return True
    return False


def get_cart(id):
    '''Get user's cart from JSON_file.'''
    data = open_json_file()
    return data[str(id)].get("cart")


def order_cart(message):
    '''Make keyboard for order.'''
    bot.send_message(message.chat.id,
                     '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:')
    markup = types.ReplyKeyboardMarkup(row_width=2,
                                       one_time_keyboard=True,
                                       resize_keyboard=True)
    cart = get_cart(message.chat.id)
    if cart:
        for name in cart:
            bot.send_message(message.chat.id,
                             f'‚ú® {name}')
        markup.add(
            types.KeyboardButton(text='–î–∞‚úÖ'),
            types.KeyboardButton(text='–ù–µ—Ç‚ùå')
        )
        bot.send_message(message.chat.id,
                         text='–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ.'
                         ' –ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         '–£ –≤–∞—Å –ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞.')


def ask_geo_mark(message):
    '''Ask user for address.'''
    msg = bot.send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–µ–æ–º–µ—Ç–∫–æ–π Telegram.')
    bot.register_next_step_handler(msg,
                                   geo_mark)

def geo_mark(message):
    '''Send user's address to user.'''
    bot.send_message(message.chat.id,
                     f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å: message.text')
    total = calculate_cart_total(message.chat.id)
    bot.send_message(message.chat.id,
                     f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±–ª–µ–π.\n'
                     '–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É.\n'
                     '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—ÉüöÄ')
    

def calculate_cart_total(id):
    cart = get_cart(id)
    count = 0
    for item in menu_items:
        if item["name"] in cart:
            count += (int(item["price"].split()[0]) * cart[item["name"]])
    return count


def make_cart(message):
    '''Make cart and products can be added or delete.'''
    cart = get_cart(str(message.chat.id))
    if cart:
        markup = types.InlineKeyboardMarkup(row_width=3)
        for name in cart:
            btn1 = types.InlineKeyboardButton(text='-',
                                              callback_data=f'minus;{name}')
            btn2 = types.InlineKeyboardButton(text='+',
                                              callback_data=f'plus;{name}')
            btn3 = types.InlineKeyboardButton(text=f'x{cart[name]} {name}',
                                              callback_data='pass')
            markup.add(btn1, btn3, btn2)
        return markup
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ')


def menu(page=0):
    '''Make menu keyboard.'''
    markup = types.InlineKeyboardMarkup(row_width=1)
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    for i in menu_items[start_index:end_index]:
        markup.add(
            types.InlineKeyboardButton(
                text=f'{i['name']}: {i['price']}',
                callback_data=f'menu;{i['name']}')
            )
    if page > 0:
        markup.add(
            types.InlineKeyboardButton(
                    text='<--',
                    callback_data=f'page;{page - 1}')
                )
    if end_index < len(menu_items):
        markup.add(
            types.InlineKeyboardButton(
                text='-->',
                callback_data=f'page;{page + 1}')
            )
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    '''Main menu with buttons and check user in JSON-data'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=False,
                                       row_width=3)
    button1 = types.KeyboardButton('–ú–µ–Ω—éüçú')
    button2 = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞üß∫')
    button3 = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ')
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id,
                     '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ—Å—Ç–∞–≤–∫—É ...',
                     reply_markup=markup)
    data = open_json_file()
    if str(message.chat.id) in data:
        pass
    else:
        msg = bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(msg,
                                        ask_phone)


def ask_phone(message):
    '''Ask user for personal info.'''
    user_info =  {
        "name": message.text,
        "cart": {}
    }
    data = open_json_file()
    data[str(message.chat.id)] = user_info
    close_json_file(data)
    bot.send_message(message.chat.id,
                            '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    bot.register_next_step_handler(message,
                                    save_info)


def save_info(message):
    if correct_number(message.text):
        data = open_json_file()
        data[str(message.chat.id)]["phone"] = message.text
        bot.send_message(message.chat.id,
                                 '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        close_json_file(data)
    else:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
                         '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: /start')


@bot.message_handler(func=lambda message: True)
def handler_all(message):
    '''Check which button was pressed.'''
    if message.text == '–ú–µ–Ω—éüçú':
        bot.send_message(message.chat.id,
                         '–ú–µ–Ω—é:',
                         reply_markup=menu())
    if message.text == '–ö–æ—Ä–∑–∏–Ω–∞üß∫':
        bot.send_message(message.chat.id,
                         '–ö–æ—Ä–∑–∏–Ω–∞:',
                         reply_markup=make_cart(message))
    if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ':
        bot.send_message(message.chat.id,
                         text='‚ú®‚ú®‚ú®',
                         reply_markup=order_cart(message))
    if message.text.startswith('–ù–µ—Ç'):
        bot.send_message(message.chat.id,
                         '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.'
                         ' –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ: /start')
    if message.text.startswith('–î–∞'):
        ask_geo_mark(message)



@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    '''Callback data.'''
    if call.data.startswith('plus'):
        _, name = call.data.split(';')
        data = open_json_file()
        client_cart_plus = data[str(call.message.chat.id)].get("cart")
        if name in client_cart_plus:
            client_cart_plus[name] += 1
        else:
            client_cart_plus[name] = 1
        close_json_file(data)
        bot.edit_message_text(text='–ö–æ—Ä–∑–∏–Ω–∞:',
                              message_id=call.message.message_id,
                              chat_id=call.message.chat.id,
                              reply_markup=make_cart(call.message))
    if call.data.startswith('minus'):
        _, name = call.data.split(';')
        data = open_json_file()
        client_cart_minus = data[str(call.message.chat.id)].get("cart")
        if client_cart_minus[name] <= 1:
            del client_cart_minus[name]
        else:
            client_cart_minus[name] -= 1
        close_json_file(data)
        bot.edit_message_text(text='–ö–æ—Ä–∑–∏–Ω–∞:',
                              message_id=str(call.message.message_id),
                              chat_id=call.message.chat.id,
                              reply_markup=make_cart(call.message))
    if call.data.startswith('page'):
        _, page = call.data.split(';')
        markup = menu(int(page))
        bot.edit_message_text(text='–ö–æ—Ä–∑–∏–Ω–∞:',
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=markup)
    if call.data.startswith('menu'):
        _, name = call.data.split(';')
        data = open_json_file()
        menu_cart = data[str(call.message.chat.id)].get("cart")
        if name not in menu_cart:
            menu_cart[name] = 1
        else:
            menu_cart[name] += 1
        bot.send_message(call.message.chat.id,
                                 f'{name} –¥–æ–±–∞–≤–ª–µ–Ω.')
        close_json_file(data)


bot.infinity_polling()
